{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Numeric and Alphabetic Functions",
      "provenance": [],
      "authorship_tag": "ABX9TyPuzwiVQB8h9iJ6u/ZmxfBU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rohitshyam/python/blob/main/Numeric_and_Alphabetic_Functions.ipynb%20call%20ascii%20value%20in%20single%20program\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ysOLRAi73muV",
        "outputId": "e9c2b441-bac9-4f76-a341-4e6863de9c3b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "00\n",
            "000\n",
            "1\n",
            "12\n",
            "123\n",
            "A\n",
            "AB\n",
            "ABC\n"
          ]
        }
      ],
      "source": [
        "#range (start=0, end, step=1)\n",
        "#print(ord('0'))\n",
        "#print(chr(65))\n",
        "\"\"\"\n",
        "1\n",
        "12\n",
        "123\n",
        "\n",
        "a\n",
        "AB\n",
        "ABC\n",
        "\"\"\"\n",
        "n=3\n",
        "for row in range(1,n+1):\n",
        "  for col in range(1,row+1):\n",
        "    print(0,end=\"\")\n",
        "  print()\n",
        "for row in range(1,n+1):\n",
        "  for col in range(1,row+1):\n",
        "    print(col,end=\"\")\n",
        "  print()\n",
        "value=ord('A')\n",
        "for row in range(1,n+1):\n",
        "  for col in range(1,row+1):\n",
        "    ch=chr(value + col-1)\n",
        "    print(ch,end=\"\")\n",
        "  print()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#print(chr(70))\n",
        "n=30\n",
        "for row in range(1,n+1):\n",
        "  for col in range(1,row+1):\n",
        "    print(col,end=\"\")\n",
        "  print()\n",
        "value=ord('a')\n",
        "for row in range(1,n+1):\n",
        "  for col in range(1,row+1):\n",
        "    ch=chr(value+col-1)\n",
        "    print(ch,end=\"\")\n",
        "  print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pYk7D5cP_Ryx",
        "outputId": "20ca1c44-7a7a-4f39-a61e-1d8df94cb318"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "12\n",
            "123\n",
            "1234\n",
            "12345\n",
            "123456\n",
            "1234567\n",
            "12345678\n",
            "123456789\n",
            "12345678910\n",
            "1234567891011\n",
            "123456789101112\n",
            "12345678910111213\n",
            "1234567891011121314\n",
            "123456789101112131415\n",
            "12345678910111213141516\n",
            "1234567891011121314151617\n",
            "123456789101112131415161718\n",
            "12345678910111213141516171819\n",
            "1234567891011121314151617181920\n",
            "123456789101112131415161718192021\n",
            "12345678910111213141516171819202122\n",
            "1234567891011121314151617181920212223\n",
            "123456789101112131415161718192021222324\n",
            "12345678910111213141516171819202122232425\n",
            "1234567891011121314151617181920212223242526\n",
            "123456789101112131415161718192021222324252627\n",
            "12345678910111213141516171819202122232425262728\n",
            "1234567891011121314151617181920212223242526272829\n",
            "123456789101112131415161718192021222324252627282930\n",
            "a\n",
            "ab\n",
            "abc\n",
            "abcd\n",
            "abcde\n",
            "abcdef\n",
            "abcdefg\n",
            "abcdefgh\n",
            "abcdefghi\n",
            "abcdefghij\n",
            "abcdefghijk\n",
            "abcdefghijkl\n",
            "abcdefghijklm\n",
            "abcdefghijklmn\n",
            "abcdefghijklmno\n",
            "abcdefghijklmnop\n",
            "abcdefghijklmnopq\n",
            "abcdefghijklmnopqr\n",
            "abcdefghijklmnopqrs\n",
            "abcdefghijklmnopqrst\n",
            "abcdefghijklmnopqrstu\n",
            "abcdefghijklmnopqrstuv\n",
            "abcdefghijklmnopqrstuvw\n",
            "abcdefghijklmnopqrstuvwx\n",
            "abcdefghijklmnopqrstuvwxy\n",
            "abcdefghijklmnopqrstuvwxyz\n",
            "abcdefghijklmnopqrstuvwxyz{\n",
            "abcdefghijklmnopqrstuvwxyz{|\n",
            "abcdefghijklmnopqrstuvwxyz{|}\n",
            "abcdefghijklmnopqrstuvwxyz{|}~\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(256):\n",
        "  value=chr(i)\n",
        "  print(i,value,end=',')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-OAHFzCPMx5F",
        "outputId": "59423660-2ef8-4f2f-d3f0-ce4115352e63"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 \u0000,1 \u0001,2 \u0002,3 \u0003,4 \u0004,5 \u0005,6 \u0006,7 \u0007,8 \b,9 \t,10 \n",
            ",11 \u000b,12 \f,13 \r,14 \u000e,15 \u000f,16 \u0010,17 \u0011,18 \u0012,19 \u0013,20 \u0014,21 \u0015,22 \u0016,23 \u0017,24 \u0018,25 \u0019,26 \u001a,27 \u001b,28 \u001c,29 \u001d,30 \u001e,31 \u001f,32  ,33 !,34 \",35 #,36 $,37 %,38 &,39 ',40 (,41 ),42 *,43 +,44 ,,45 -,46 .,47 /,48 0,49 1,50 2,51 3,52 4,53 5,54 6,55 7,56 8,57 9,58 :,59 ;,60 <,61 =,62 >,63 ?,64 @,65 A,66 B,67 C,68 D,69 E,70 F,71 G,72 H,73 I,74 J,75 K,76 L,77 M,78 N,79 O,80 P,81 Q,82 R,83 S,84 T,85 U,86 V,87 W,88 X,89 Y,90 Z,91 [,92 \\,93 ],94 ^,95 _,96 `,97 a,98 b,99 c,100 d,101 e,102 f,103 g,104 h,105 i,106 j,107 k,108 l,109 m,110 n,111 o,112 p,113 q,114 r,115 s,116 t,117 u,118 v,119 w,120 x,121 y,122 z,123 {,124 |,125 },126 ~,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144 ,145 ,146 ,147 ,148 ,149 ,150 ,151 ,152 ,153 ,154 ,155 ,156 ,157 ,158 ,159 ,160  ,161 ¡,162 ¢,163 £,164 ¤,165 ¥,166 ¦,167 §,168 ¨,169 ©,170 ª,171 «,172 ¬,173 ­,174 ®,175 ¯,176 °,177 ±,178 ²,179 ³,180 ´,181 µ,182 ¶,183 ·,184 ¸,185 ¹,186 º,187 »,188 ¼,189 ½,190 ¾,191 ¿,192 À,193 Á,194 Â,195 Ã,196 Ä,197 Å,198 Æ,199 Ç,200 È,201 É,202 Ê,203 Ë,204 Ì,205 Í,206 Î,207 Ï,208 Ð,209 Ñ,210 Ò,211 Ó,212 Ô,213 Õ,214 Ö,215 ×,216 Ø,217 Ù,218 Ú,219 Û,220 Ü,221 Ý,222 Þ,223 ß,224 à,225 á,226 â,227 ã,228 ä,229 å,230 æ,231 ç,232 è,233 é,234 ê,235 ë,236 ì,237 í,238 î,239 ï,240 ð,241 ñ,242 ò,243 ó,244 ô,245 õ,246 ö,247 ÷,248 ø,249 ù,250 ú,251 û,252 ü,253 ý,254 þ,255 ÿ,"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "cZcPdBlXQAHO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "XuQzEiCQP_GG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "RuD_MN7UP-2W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "2wK2Cpx9P9Ct"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}